{"tkTxO10wyH": [], "WvQtaplsDA": [], "VeA17qFsn1": [], "CZKH2Nh3zD": [], "Gvpftpexin": [{"output_type": "stream", "name": "stdout", "text": "Epoch [1/5], Step [100/938], Loss: 0.6288\nEpoch [1/5], Step [200/938], Loss: 0.1743\nEpoch [1/5], Step [300/938], Loss: 0.1075\nEpoch [1/5], Step [400/938], Loss: 0.1040\nEpoch [1/5], Step [500/938], Loss: 0.0819\nEpoch [1/5], Step [600/938], Loss: 0.0715\nEpoch [1/5], Step [700/938], Loss: 0.0688\nEpoch [1/5], Step [800/938], Loss: 0.0711\nEpoch [1/5], Step [900/938], Loss: 0.0686\nEpoch [2/5], Step [100/938], Loss: 0.0479\nEpoch [2/5], Step [200/938], Loss: 0.0572\nEpoch [2/5], Step [300/938], Loss: 0.0467\nEpoch [2/5], Step [400/938], Loss: 0.0458\nEpoch [2/5], Step [500/938], Loss: 0.0477\nEpoch [2/5], Step [600/938], Loss: 0.0482\nEpoch [2/5], Step [700/938], Loss: 0.0421\nEpoch [2/5], Step [800/938], Loss: 0.0368\nEpoch [2/5], Step [900/938], Loss: 0.0432\nEpoch [3/5], Step [100/938], Loss: 0.0276\nEpoch [3/5], Step [200/938], Loss: 0.0307\nEpoch [3/5], Step [300/938], Loss: 0.0295\nEpoch [3/5], Step [400/938], Loss: 0.0369\nEpoch [3/5], Step [500/938], Loss: 0.0377\nEpoch [3/5], Step [600/938], Loss: 0.0389\nEpoch [3/5], Step [700/938], Loss: 0.0314\nEpoch [3/5], Step [800/938], Loss: 0.0261\nEpoch [3/5], Step [900/938], Loss: 0.0316\nEpoch [4/5], Step [100/938], Loss: 0.0196\nEpoch [4/5], Step [200/938], Loss: 0.0222\nEpoch [4/5], Step [300/938], Loss: 0.0287\nEpoch [4/5], Step [400/938], Loss: 0.0198\nEpoch [4/5], Step [500/938], Loss: 0.0134\nEpoch [4/5], Step [600/938], Loss: 0.0258\nEpoch [4/5], Step [700/938], Loss: 0.0297\nEpoch [4/5], Step [800/938], Loss: 0.0281\nEpoch [4/5], Step [900/938], Loss: 0.0292\nEpoch [5/5], Step [100/938], Loss: 0.0195\nEpoch [5/5], Step [200/938], Loss: 0.0137\nEpoch [5/5], Step [300/938], Loss: 0.0175\nEpoch [5/5], Step [400/938], Loss: 0.0194\nEpoch [5/5], Step [500/938], Loss: 0.0191\nEpoch [5/5], Step [600/938], Loss: 0.0179\nEpoch [5/5], Step [700/938], Loss: 0.0190\nEpoch [5/5], Step [800/938], Loss: 0.0170\nEpoch [5/5], Step [900/938], Loss: 0.0204\nTrain Accuracy: 0.9949, Test Accuracy: 0.9915\n"}], "kNIHWW3wpq": [], "q2ssiQTxIR": [{"output_type": "stream", "name": "stdout", "text": "recon_acc: 0.5786\nEpoch 1 Average Loss: 1012.3624\nrecon_acc: 0.7030\nEpoch 2 Average Loss: 1008.4868\nrecon_acc: 0.7404\nEpoch 3 Average Loss: 1008.2261\nrecon_acc: 0.2299\nEpoch 4 Average Loss: 1034.2758\nrecon_acc: 0.1574\nEpoch 5 Average Loss: 1039.7319\nrecon_acc: 0.1310\nEpoch 6 Average Loss: 1036.0778\nrecon_acc: 0.0468\nEpoch 7 Average Loss: 1035.6510\nrecon_acc: 0.0778\nEpoch 8 Average Loss: 1027.5454\nrecon_acc: 0.1010\nEpoch 9 Average Loss: 1026.3432\nrecon_acc: 0.0957\nEpoch 10 Average Loss: 1022.0529\nrecon_acc: 0.1108\nEpoch 11 Average Loss: 1029.7367\nrecon_acc: 0.1253\nEpoch 12 Average Loss: 1035.2250\nrecon_acc: 0.1255\nEpoch 13 Average Loss: 1036.5651\nrecon_acc: 0.1150\nEpoch 14 Average Loss: 1035.1464\nrecon_acc: 0.1144\nEpoch 15 Average Loss: 1034.4903\nrecon_acc: 0.1257\nEpoch 16 Average Loss: 1034.2377\nrecon_acc: 0.1458\nEpoch 17 Average Loss: 1033.0410\nrecon_acc: 0.1678\nEpoch 18 Average Loss: 1032.3229\nrecon_acc: 0.2076\nEpoch 19 Average Loss: 1032.5581\nrecon_acc: 0.2881\nEpoch 20 Average Loss: 1032.9585\nrecon_acc: 0.2844\nEpoch 21 Average Loss: 1030.4724\nrecon_acc: 0.3233\nEpoch 22 Average Loss: 1030.1929\nrecon_acc: 0.3334\nEpoch 23 Average Loss: 1030.3903\nrecon_acc: 0.1565\nEpoch 24 Average Loss: 1037.6133\nrecon_acc: 0.0245\nEpoch 25 Average Loss: 1035.5857\nrecon_acc: 0.0107\nEpoch 26 Average Loss: 1028.2342\nrecon_acc: 0.0292\nEpoch 27 Average Loss: 1028.4268\nrecon_acc: 0.0753\nEpoch 28 Average Loss: 1028.3319\nrecon_acc: 0.0431\nEpoch 29 Average Loss: 1030.8750\nrecon_acc: 0.0973\nEpoch 30 Average Loss: 1038.2484\nrecon_acc: 0.1278\nEpoch 31 Average Loss: 1036.1770\nrecon_acc: 0.1412\nEpoch 32 Average Loss: 1035.1114\nrecon_acc: 0.1104\nEpoch 33 Average Loss: 1033.8224\nrecon_acc: 0.1139\nEpoch 34 Average Loss: 1032.4795\nrecon_acc: 0.1415\nEpoch 35 Average Loss: 1030.8225\nrecon_acc: 0.1449\nEpoch 36 Average Loss: 1028.6495\nrecon_acc: 0.1152\nEpoch 37 Average Loss: 1029.7505\nrecon_acc: 0.1183\nEpoch 38 Average Loss: 1030.7669\nrecon_acc: 0.0537\nEpoch 39 Average Loss: 1033.2544\nrecon_acc: 0.1000\nEpoch 40 Average Loss: 1032.6635\nrecon_acc: 0.0933\nEpoch 41 Average Loss: 1033.2858\nrecon_acc: 0.0323\nEpoch 42 Average Loss: 1032.7341\nrecon_acc: 0.0262\nEpoch 43 Average Loss: 1032.0216\nrecon_acc: 0.0340\nEpoch 44 Average Loss: 1031.5497\nrecon_acc: 0.0195\nEpoch 45 Average Loss: 1032.8969\nrecon_acc: 0.0833\nEpoch 46 Average Loss: 1033.4764\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)\nCell \u001b[0;32mIn[29], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m vae \u001b[38;5;241m=\u001b[39m ClusterVAE()\u001b[38;5;241m.\u001b[39mto(Config\u001b[38;5;241m.\u001b[39mdevice)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# \u8bad\u7ec3\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m train_model(vae, train_loader,model)\n\nCell \u001b[0;32mIn[28], line 141\u001b[0m, in \u001b[0;36mtrain_model\u001b[0;34m(model, train_loader, target_model)\u001b[0m\n\u001b[1;32m    139\u001b[0m pbar \u001b[38;5;241m=\u001b[39m tqdm(train_loader, desc\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEpoch \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mepoch\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mConfig\u001b[38;5;241m.\u001b[39mepochs\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    140\u001b[0m acc_list \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m--> 141\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m data, labels \u001b[38;5;129;01min\u001b[39;00m pbar:\n\u001b[1;32m    142\u001b[0m     data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mto(Config\u001b[38;5;241m.\u001b[39mdevice)\n\u001b[1;32m    144\u001b[0m     labels \u001b[38;5;241m=\u001b[39m labels\u001b[38;5;241m.\u001b[39mto(Config\u001b[38;5;241m.\u001b[39mdevice)\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/tqdm/std.py:1181\u001b[0m, in \u001b[0;36mtqdm.__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1178\u001b[0m time \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_time\n\u001b[1;32m   1180\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1181\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m obj \u001b[38;5;129;01min\u001b[39;00m iterable:\n\u001b[1;32m   1182\u001b[0m         \u001b[38;5;28;01myield\u001b[39;00m obj\n\u001b[1;32m   1183\u001b[0m         \u001b[38;5;66;03m# Update and possibly print the progressbar.\u001b[39;00m\n\u001b[1;32m   1184\u001b[0m         \u001b[38;5;66;03m# Note: does not call self.update(1) for speed optimisation.\u001b[39;00m\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torch/utils/data/dataloader.py:701\u001b[0m, in \u001b[0;36m_BaseDataLoaderIter.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    698\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sampler_iter \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    699\u001b[0m     \u001b[38;5;66;03m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[39;00m\n\u001b[1;32m    700\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()  \u001b[38;5;66;03m# type: ignore[call-arg]\u001b[39;00m\n\u001b[0;32m--> 701\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_next_data()\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    703\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m    704\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dataset_kind \u001b[38;5;241m==\u001b[39m _DatasetKind\u001b[38;5;241m.\u001b[39mIterable\n\u001b[1;32m    705\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    706\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m>\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called\n\u001b[1;32m    707\u001b[0m ):\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torch/utils/data/dataloader.py:757\u001b[0m, in \u001b[0;36m_SingleProcessDataLoaderIter._next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_next_data\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    756\u001b[0m     index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_next_index()  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[0;32m--> 757\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dataset_fetcher\u001b[38;5;241m.\u001b[39mfetch(index)  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[1;32m    758\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory:\n\u001b[1;32m    759\u001b[0m         data \u001b[38;5;241m=\u001b[39m _utils\u001b[38;5;241m.\u001b[39mpin_memory\u001b[38;5;241m.\u001b[39mpin_memory(data, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory_device)\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torch/utils/data/_utils/fetch.py:52\u001b[0m, in \u001b[0;36m_MapDatasetFetcher.fetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m         data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;241m.\u001b[39m__getitems__(possibly_batched_index)\n\u001b[1;32m     51\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 52\u001b[0m         data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[idx] \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m possibly_batched_index]\n\u001b[1;32m     53\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     54\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[possibly_batched_index]\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torchvision/datasets/mnist.py:146\u001b[0m, in \u001b[0;36mMNIST.__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    143\u001b[0m img \u001b[38;5;241m=\u001b[39m Image\u001b[38;5;241m.\u001b[39mfromarray(img\u001b[38;5;241m.\u001b[39mnumpy(), mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mL\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransform \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 146\u001b[0m     img \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransform(img)\n\u001b[1;32m    148\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtarget_transform \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    149\u001b[0m     target \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtarget_transform(target)\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torchvision/transforms/transforms.py:95\u001b[0m, in \u001b[0;36mCompose.__call__\u001b[0;34m(self, img)\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, img):\n\u001b[1;32m     94\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransforms:\n\u001b[0;32m---> 95\u001b[0m         img \u001b[38;5;241m=\u001b[39m t(img)\n\u001b[1;32m     96\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m img\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torchvision/transforms/transforms.py:137\u001b[0m, in \u001b[0;36mToTensor.__call__\u001b[0;34m(self, pic)\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, pic):\n\u001b[1;32m    130\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    131\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[1;32m    132\u001b[0m \u001b[38;5;124;03m        pic (PIL Image or numpy.ndarray): Image to be converted to tensor.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    135\u001b[0m \u001b[38;5;124;03m        Tensor: Converted image.\u001b[39;00m\n\u001b[1;32m    136\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 137\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mto_tensor(pic)\n\nFile \u001b[0;32m~/anaconda3/lib/python3.12/site-packages/torchvision/transforms/functional.py:147\u001b[0m, in \u001b[0;36mto_tensor\u001b[0;34m(pic)\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _is_numpy(pic) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _is_numpy_image(pic):\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpic should be 2/3 dimensional. Got \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpic\u001b[38;5;241m.\u001b[39mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dimensions.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 147\u001b[0m default_float_dtype \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mget_default_dtype()\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(pic, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m    150\u001b[0m     \u001b[38;5;66;03m# handle numpy array\u001b[39;00m\n\u001b[1;32m    151\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m pic\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\n\u001b[0;31mKeyboardInterrupt\u001b[0m: \n"}]}